// Code generated by MockGen. DO NOT EDIT.
// Source: employees_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	data "employee_manager/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployeeRepository) Delete(employeesId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", employeesId)
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeRepositoryMockRecorder) Delete(employeesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeRepository)(nil).Delete), employeesId)
}

// FindAll mocks base method.
func (m *MockEmployeeRepository) FindAll(limit, page int) data.AllEmployeesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", limit, page)
	ret0, _ := ret[0].(data.AllEmployeesResponse)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEmployeeRepositoryMockRecorder) FindAll(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEmployeeRepository)(nil).FindAll), limit, page)
}

// FindById mocks base method.
func (m *MockEmployeeRepository) FindById(employeesId int) (data.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", employeesId)
	ret0, _ := ret[0].(data.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockEmployeeRepositoryMockRecorder) FindById(employeesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockEmployeeRepository)(nil).FindById), employeesId)
}

// Save mocks base method.
func (m *MockEmployeeRepository) Save(employees data.Employee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", employees)
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeRepositoryMockRecorder) Save(employees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepository)(nil).Save), employees)
}

// Update mocks base method.
func (m *MockEmployeeRepository) Update(employees data.Employee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", employees)
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeRepositoryMockRecorder) Update(employees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeRepository)(nil).Update), employees)
}
