// Code generated by MockGen. DO NOT EDIT.
// Source: employees_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	data "employee_manager/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeeService) Create(employees data.Employee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", employees)
}

// Create indicates an expected call of Create.
func (mr *MockEmployeeServiceMockRecorder) Create(employees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeService)(nil).Create), employees)
}

// Delete mocks base method.
func (m *MockEmployeeService) Delete(employeesId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", employeesId)
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeServiceMockRecorder) Delete(employeesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeService)(nil).Delete), employeesId)
}

// FindAll mocks base method.
func (m *MockEmployeeService) FindAll(limit, page int) data.AllEmployeesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", limit, page)
	ret0, _ := ret[0].(data.AllEmployeesResponse)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEmployeeServiceMockRecorder) FindAll(limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEmployeeService)(nil).FindAll), limit, page)
}

// FindById mocks base method.
func (m *MockEmployeeService) FindById(employeesId int) data.Employee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", employeesId)
	ret0, _ := ret[0].(data.Employee)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockEmployeeServiceMockRecorder) FindById(employeesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockEmployeeService)(nil).FindById), employeesId)
}

// Update mocks base method.
func (m *MockEmployeeService) Update(employees data.Employee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", employees)
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeServiceMockRecorder) Update(employees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeService)(nil).Update), employees)
}
